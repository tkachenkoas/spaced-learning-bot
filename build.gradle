buildscript {
    ext {
        springBootVersion = '2.4.2'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
}

apply from: 'versions.gradle'

group = 'com.atstudio'
version = '1.0.1'
sourceCompatibility = '1.8'

allprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        testImplementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.14'
    }
}

def bootJarName = "spaced-learning-bot.jar"
bootJar.enabled = false

def buildTaskRequests = gradle.startParameter.taskRequests
def onlyScApplicationTest = buildTaskRequests.size() == 1 &&
        buildTaskRequests[0].args[0] == ':sc-application:test'

subprojects {

    it.apply plugin: 'java'

    if (it.name == 'lb-application' || it.name == 'lb-data-dynamodb') {
        repositories {
            maven {
                url 'http://dynamodb-local.s3-website-us-west-2.amazonaws.com/release'
            }
        }

        configurations {
            dynamodb
        }

        dependencies {
            testImplementation "com.amazonaws:DynamoDBLocal:$dynamoDbLocal"
            dynamodb fileTree(dir: 'lib', include: ["*.dylib", "*.so", "*.dll"])
            dynamodb "com.amazonaws:DynamoDBLocal:$dynamoDbLocal"
        }

        task copyNativeDeps(type: Copy) {
            from configurations.dynamodb
            into "$project.buildDir/libs/"
        }

        test.dependsOn copyNativeDeps
        test.doFirst {
            systemProperty "java.library.path", 'build/libs'
        }
    }

    if (it.name != 'application') {
        bootJar.enabled = false
        jar.enabled = true
    } else {
        // This is to make module (aka 'unit') tests run before application-level ('integration') tests
        // However, if you run a single test from IDE, it should not trigger dependencies
        if (!onlyScApplicationTest) {
            def dependsOnModules = [':telegram']

            for (def module : dependsOnModules) {
                test.dependsOn "$module:test"
            }
        }

        bootJar {
            archiveFileName = "${bootJarName}"
        }
        springBoot {
            buildInfo()
        }
    }

    test {
        systemProperty "spring.profiles.active", 'test'
        useJUnitPlatform()
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:$lombokVer"
        annotationProcessor "org.projectlombok:lombok:$lombokVer"

        implementation 'org.apache.commons:commons-lang3:3.10'
        implementation 'org.apache.commons:commons-collections4:4.1'

        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-logging'

        testCompileOnly "org.projectlombok:lombok:$lombokVer"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVer"

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }
}